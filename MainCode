import numpy as np
import scipy.stats
class Black_Scholes_Merton():
  def __init__(self, S0, X, r, T, sig, typ="call"):
    self.price = None
    self.delta = None
    self.gamma = None
    self.vega = None
    self.rho = None
    self.theta = None
    self.S0 = S0
    self.X = X
    self.r = r
    self.T = T
    self.sig = sig
    self.d1 = (np.log(self.S0/self.X) + self.T*(self.r + 0.5*self.sig*self.sig))/(self.sig*np.sqrt(self.T))
    self.d2 = self.d1 - (self.sig*np.sqrt(self.T))
    self.typ = typ
  
  def calculate_price(self):
    if self.typ == "call":
      self.price = (self.S0*scipy.stats.norm.cdf(self.d1)) - (self.X*np.exp(-self.r*self.T)*scipy.stats.norm.cdf(self.d2))
    elif self.typ == "put":
      self.price = (self.X*np.exp(-self.r*self.T)*(1-scipy.stats.norm.cdf(self.d2))) - (self.S0*(1-scipy.stats.norm.cdf(self.d1)))
    return self.price
  
  def calc_delta(self):
    self.delta = scipy.stats.norm.cdf(self.d1)
    return self.delta
  
  def calc_theta(self):
    if self.typ == "call":
      self.theta = -(self.S0*scipy.stats.norm.pdf(self.d1)*self.sig/(2*np.sqrt(self.T))) - self.r*self.X*np.exp(-self.r*self.T)*scipy.stats.norm.cdf(self.d2)
    elif self.typ == "put":
      self.theta = -(self.S0*scipy.stats.norm.pdf(self.d1)*self.sig/(2*np.sqrt(self.T))) + self.r*self.X*np.exp(-self.r*self.T)*scipy.stats.norm.cdf(-self.d2)
    return self.theta
  
  def calc_gamma(self):
    self.gamma = scipy.stats.norm.pdf(self.d1)/(self.S0*self.sig*np.sqrt(self.T))
    return self.gamma
  
  def calc_vega(self):
    self.vega = self.S0*scipy.stats.norm.pdf(self.d1)*np.sqrt(self.T)
    return self.vega
  
  def calc_rho(self):
    if self.typ == "call":
      self.rho = self.X*self.T*np.exp(-self.r*self.T)*scipy.stats.norm.cdf(self.d2)
    elif self.typ == "put":
      self.rho = -self.X*self.T*np.exp(-self.r*self.T)*scipy.stats.norm.cdf(-self.d2)
    return self.rho
